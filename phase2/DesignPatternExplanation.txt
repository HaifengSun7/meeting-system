We've used Builder, Façade, Strategy, and Factory design patterns.

- Factory design pattern, in EventManager:

WHY: We create the eventFactory to easily get different types of events,
     according to the number of speakers and attendees the event has.
HOW: We created a factory method inside EventManager,
     we used that factory in method addUserToEvent.
     So whatever the user enters, we will create a correct event type.



- Façade design pattern, in different Managers:

WHY: We need some information about some values inside the entities from other use cases,
     which are not interacting with those entities directly. We need some facades to avoid breaking the clean architecture,
How: we create modified Facade methods inside some Use Case classes.
     Our UserSystem(and its subclasses) delegate the operations to EventManager, UserManager, MessageManager, and RequestManager.



- Builder design pattern, in ManagerBuilder class.

WHY: Considering future extension, adding new controllers and different use case classes will make the program huge,
     and can be slow to run if it reads while proceeds information.
     Thus, we use Builder class to initialize necessary use case classes only.
     It also helps to clean up some codes, making them clearer for understanding.
HOW: We have different controllers as "client", and the ManagerBuilder class as a "builder".
     We made the "director" part within the controllers, since this part of code is very straight forward.
     For future extension. we may want to take these codes out and create a "director" class instead.
     When our program runs, controllers will ask the "director" (built in controllers right now),
     to initialize their required use case classes (EventManager, UserManager,...),
     which are then initialized in ManagerBuilder class.

- Strategy design pattern, in Event class

WHY: Since we add different types of events based on the number of speakers, including party events (no-speaker event),
     multi-speaker events, and single-speaker event. Different types of events have different algorithms. So we use
     Strategy design pattern to separate various algorithms into different classes, rather than putting all of them in
     one class. It helps understand the structure of implementation of event entity and follows the clean architecture,
     makes the code easy to extend.
HOW: We implement a parent class called Event, and then implement three child classes including MultiEvent, PartyEvent,
     and SingleEvent to extend parent class Event. Such that, Event class has the mutual methods that the other three
     child classes are able to access them, and those three child classes have their own algorithms to define their own
     features.

- Strategy design pattern, in User class

WHY: Since we have multiple types of users, including organizer, speaker, attendee, and VIP attendee. Each of them have
     different algorithms to define themselves. Thus, we use the Strategy design pattern to separate various algorithms
     into different classes rather than gathering them in one class. It follows the clean architecture, and makes our code
     clear to understand what kinds of user we have in our project, and also makes code easy to extend.
HOW: We first implement a parent class called User, it includes all mutual methods that other types of users are able to
     access them. And then we implement four child classes including Organizer, Speaker, Attendee and VIP. These four
     child classes have their own methods to define themselves.

- Why we not use Dependency Injection:
    We did not use Dependency Injection in RoomManager and ConferenceManager.
    Instead of storing an Event with type event, we just store the id number with type int.
    So we avoid interactions between two different Manager classes.
    But if we do that, we will not able to apply Dependency Injection here, which requires us to store a special type.